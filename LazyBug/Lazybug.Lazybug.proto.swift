/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: lazybug.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
    typealias Version = _1
}

struct Lazybug_FeedbackAddRequest: SwiftProtobuf.Message {
    static let protoMessageName: String = _protobuf_package + ".FeedbackAddRequest"

    var identifier: String = String()

    var creationDate: String = String()

    var content: Data = SwiftProtobuf.Internal.emptyData

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &self.identifier)
            case 2: try decoder.decodeSingularStringField(value: &self.creationDate)
            case 3: try decoder.decodeSingularBytesField(value: &self.content)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !self.identifier.isEmpty {
            try visitor.visitSingularStringField(value: self.identifier, fieldNumber: 1)
        }
        if !self.creationDate.isEmpty {
            try visitor.visitSingularStringField(value: self.creationDate, fieldNumber: 2)
        }
        if !self.content.isEmpty {
            try visitor.visitSingularBytesField(value: self.content, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "lazybug"

extension Lazybug_FeedbackAddRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "identifier"),
        2: .same(proto: "creationDate"),
        3: .same(proto: "content"),
        ]

    func _protobuf_generated_isEqualTo(other: Lazybug_FeedbackAddRequest) -> Bool {
        if self.identifier != other.identifier {return false}
        if self.creationDate != other.creationDate {return false}
        if self.content != other.content {return false}
        if unknownFields != other.unknownFields {return false}
        return true
    }
}
